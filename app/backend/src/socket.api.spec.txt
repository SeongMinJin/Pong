@	PROTOCOL:	WS
@	PORT		:	81
@	CAUTION	:	2 FA 인증 후 받은 토큰을 소켓 연결 할 때 꼭 함께 첨부해주세요.
const socket = io('ws://localhost', {
  extraHeaders: {
    Authorization: 'Bearer ' + token,
  }
})



----------------------------------------------------------


@ 채팅방 만들기 이벤트

socket.emit('createChatRoom', {
	"status": "public" || "protected" || "private"
	"title": string,
	"password": string( protected 인 경우 )
})


socket.on('createChatRoomResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}


----------------------------------------------------------


@ 채팅방 입장 이벤트

socket.emit('joinChatRoom', {
  "roomId": number,
  "password": string (protected 채팅방인 경우)
})

socket.on('joinChatRoomResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.


----------------------------------------------------------


@ 채팅방 퇴장 이벤트 (뒤로 가기가 아니라, 완전히 나가기)

socket.emit('exitChatRoom', {
  "roomId": number,
})


socket.on('exitChatRoomResult', data)
data: {
  "status": "error" || "approved" ( error는 개발자에게 알림)
  "detail": string,
	"roomId": number
}


----------------------------------------------------------


@ 채팅 이벤트

socket.emit('chat', {
  "roomId": number,
  "content": string,
})

// 채팅 이벤트를 발생시켰을 때 결과를 반환받을 이벤트
socket.on('chatResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string
}

// 채팅방에 채팅이 발생했을 때 이벤트
socket.on('chat', data)
data: {
	"roomId": number,
  "status": "plain" || "notice" (plain은 일반 채팅, notice는 입장, 퇴장 알림 등등)
  "from": string,
  "content": string,
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.


----------------------------------------------------------


@ kick 이벤트

socket.emit('kick', {
  "roomId": number,
  "username": string (kick 시킬 유저네임)
})


socket.on('kickResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.

// 구현 중.
// 추방 당했을 때, 이벤트
socket.on('kick', data)


----------------------------------------------------------


@ ban 이벤트

socket.emit('ban', {
  "roomId": number,
  "username": string (밴 시킬 유저네임)
})

socket.on('banResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.

// 구현 중.
// ban 당했을 때, 이벤트
socket.on('ban', data)


----------------------------------------------------------


@ unban 이벤트

socket.emit('unban', {
  "roomId": number,
  "username": string (언밴 시킬 유저네임)
})

socket.on('unbanResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.


----------------------------------------------------------


@ mute 이벤트

socket.emit('mute, {
  "roomId": number,
  "username": string (mute 시킬 유저네임)
})


socket.on('muteResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.


----------------------------------------------------------


@ 관리자 임명 이벤트

socket.emit('appointAdmin', {
	"roomId": number,
	"username": string (관리자로 만들 유저네임)
})

socket.on('appointAdminResult', data)
data: {
	"status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
	"detail": string,
	"roomId": number
}

"status"가 "warning"인 경우, "detail"의 내용을 그대로 유저에게 알려주면 됩니다.



----------------------------------------------------------


@ 친구 추가 이벤트

socket.emit('addFriend', {
	"username": string (친구 추가 할 상대방 유저네임)
})



socket.on('addFriendResult', data)
data: {
  "status": "error" || "warning" || "approved" ( error는 개발자 에게 알림, warning은 유저에게 알림)
  "detail": string
}


----------------------------------------------------------


// 차단 기능 구현중


----------------------------------------------------------





















@ 채팅방 목록 업데이트 이벤트

socket.on('updateChatRoomList', data)
data: {
	status: string,
	title: string,
	roomId: number,
	owner: string,
	joining: number,
} []


----------------------------------------------------------


@ 본인 채팅방 목록 업데이트 이벤트

socket.on('updateMyChatRoomList', data)
data: {
	status: string,
	title: string,
	roomId: number,
	owner: string,
	joining: number,
} []


----------------------------------------------------------


@ 채팅방 유저 목록 업데이트 이벤트

socket.on('updateChatRoom', data)
data: {
	roomId: number,
	userList: {
		username: string,
		owner: boolean,
		admin: boolean,
		login: boolean,
	} [],
	banList: {
		username: string,
	} []
}






----------------------------------------------------------


@ 친구 업데이트

socket.on('updateFriend', data)
data: {
	username: string,
	status: string,
} []


----------------------------------------------------------


@ 이벤트 구독

socket.emit('subscribe', data)
data: {
	type: "chatRoomList" || "chatRoom" || "friendList" || "gameRoomList" || "dmList" || "dm" || "gameRoom"
	roomId: number (type이 "chatRoom" 또는 "dm" 또는 "gameRoom" 인 경우),
}







----------------------------------------------------------


@ 게임방 목록 업데이트
// 구현중


----------------------------------------------------------


@ 게임방 상태 업데이트
// 구현중


----------------------------------------------------------






----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
